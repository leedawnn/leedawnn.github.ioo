{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/javascript",
    "result": {"pageContext":{"currentCategory":"javascript","categories":["All","frontend","react","js","javascript","RegExp","ts","JS","회고","fronted","tool","lecture","web","environment","style"],"edges":[{"node":{"id":"4fd2ea2e-2ebb-5022-bb76-0fe669f35b71","excerpt":"var를 사용했을 때 문제점 변수 중복 선언 허용 함수 레벨 스코프 var로 선언한 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정한다. 따라서 함수 외부에서 선언한 변수는 코드 블록 내에서 선언해도 전역 변수가 된다. 변수 호이스팅 var로 선언하면 변수 호이스팅에 의해 스코프의 선두로 끌어 올려진 것처럼 동작한다. 즉, 변수 선언문 이전에 참조할 수 있다. 단, 할당문 이전에 변수를 참조하면 언제나 undefined를 반환한다. var, let, const의 차이 ES6에서 나온 let과 const 키워드는 위의 세 가지 문제점을 해결했다. 변수 중복 선언 불가 (1) let let 키워드로는 변수 중복 선언이 불가하지만, 재할당은 가능하다. (2) const const가 let과 다른 점이 있다면, 반드시 선언과 초기화를 동시에 진행되어야 한다. const도 let과 마찬가지로 재선언이 불가하며, 더 나아가 재할당도 불가하다. 재할당의 경우, 원시 값은 불가능하지만, …","fields":{"slug":"/codecamp_blog_8/"},"frontmatter":{"categories":"javascript","title":"let, const, var","date":"August 26, 2022"}},"next":{"fields":{"slug":"/codecamp_blog_9/"}},"previous":{"fields":{"slug":"/codecamp_blog_10/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}