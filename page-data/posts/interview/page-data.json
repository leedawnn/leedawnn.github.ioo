{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/interview",
    "result": {"pageContext":{"currentCategory":"interview","categories":["All","react","JS","frontend","interview","회고","tool","lecture","web","environment","style"],"edges":[{"node":{"id":"e8af381c-642f-5c10-808f-c927b25889e1","excerpt":"Part 1. 전산 기초 💡 Part 1-3 Network 자료구조 파트는 prepare_frontend_interview 레포 보면서 정리했기 때문에 스킵. HTTP의 GET과 POST 비교 GET 우선 GET 방식은 요청하는 데이터가 의 Header 부분에 url이 담겨서 전송된다. 이러한 방식은 url이라는 공간에 담겨가기 때문에 전송할 수 있는 데이터의 크기가 제한적이다. 또 보안이 필요한 데이터에 대해서는 데이터가 url에 노출되므로  방식은 적절하지 않다.(ex. password) POST POST 방식의 request는 의 Body 부분에 데이터가 담겨서 전송된다. 데이터의 크기가 GET 방식보다 크고 보안면에서 낫다.(하지만 보안적인 측면에서는 암호화를 하지 않는 이상 고만고만하다고 함.) 이러한 특성을 이해한 뒤 어디에 적용되는지를 알아보자. 우선 GET은 가져오는 것이다. 서버에서 어떤 데이터를 가져와서 보여준다거나 하는 용도이지 서버의 값이나 상태 등을 변경하지…","fields":{"slug":"/prepare-interview-02/"},"frontmatter":{"categories":"interview","title":"프론트엔드 면접 대비 Part1. CS","date":"January 28, 2023"}},"next":{"fields":{"slug":"/prepare-interview-01/"}},"previous":{"fields":{"slug":"/what-about-data-/"}}},{"node":{"id":"98188b37-4f37-56b2-b12a-e30e86391164","excerpt":"프론트엔드 면접을 준비하기 위해 Interview_Question_for_Beginner 레포를 보며 정리하려고 한다,, 😬 Part 1. 전산 기초 💡 Part 1-1 Development common sense 좋은 코드란 무엇인가? 이 질문은 자신만의 코드 철학?을 물어보는 것 같다. 개인마다 ‘좋은 코드’의 기준이 다르고, 각각의 경험을 기반으로 좋은 코드를 정의하고 있다. 읽기 쉬운 코드 일관성 있는 코드 확장 가능한 코드 객체 지향 프로그래밍이란 무엇인가? 객체 지향 프로그래밍(Object-Oriented Programming, OOP)은 프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체로 만들고, 객체들간의 상호작용을 통해 로직을 구성하는 프로그래밍 방법이다. 객체 지향 프로그래밍의 특징 추상화 객체에서 공통된 속성과 행위를 추출하는 것 추상화는 불필요한 정보는 숨기고 중요한 정보만을 표현함으로써 프로그램을 간단하게 만드는 것 아우디, 니싼, 볼보는 모…","fields":{"slug":"/prepare-interview-01/"},"frontmatter":{"categories":"interview","title":"프론트엔드 면접 대비 Part1. CS","date":"January 23, 2023"}},"next":{"fields":{"slug":"/about-jsDoc/"}},"previous":{"fields":{"slug":"/prepare-interview-02/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}