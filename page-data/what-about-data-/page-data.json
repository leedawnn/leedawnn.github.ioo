{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/what-about-data-/",
    "result": {"data":{"cur":{"id":"429bf1c8-7e67-52fb-9f32-90949608fac3","html":"<h1 id=\"데이터-속성이란\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%8D%EC%84%B1%EC%9D%B4%EB%9E%80\" aria-label=\"데이터 속성이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 속성이란?</h1>\n<p><code class=\"language-text\">data-*</code>속성은 특정한 데이터를 DOM 요소에 저장해두기 위한 목적으로 쓰인다. 브라우저는 이러한 데이터 속성에는 어떠한 행동도 관여하지 않기 때문에 개발자는 요소에 특정한 데이터를 저장하고 싶은 경우 자유롭게 사용할 수 있다.</p>\n<h2 id=\"html-문법\" style=\"position:relative;\"><a href=\"#html-%EB%AC%B8%EB%B2%95\" aria-label=\"html 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML 문법</h2>\n<p>어느 element에서나 <code class=\"language-text\">data-</code>로 시작하는 속성은 무엇이든 사용할 수 있다. 화면에 보이지 않게 글이나 추가 정보를 element에 담아 놓을 수 있다. 아래와 같이 사용하면 된다!</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>article</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>electriccars<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-columns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-index-number</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>12314<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-parent</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cars<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>article</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"javascript에서-접근하기\" style=\"position:relative;\"><a href=\"#javascript%EC%97%90%EC%84%9C-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\" aria-label=\"javascript에서 접근하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript에서 접근하기</h2>\n<p>이 속성 값들을 읽기 위해 <code class=\"language-text\">getAttribute()</code>를 사용하면 된다. 더 쉬운 방법으로 <code class=\"language-text\">dataset</code> 객체를 통해 읽어낼 수도 있다. (단, <code class=\"language-text\">data-</code> 뒷 부분을 CamelCase로 변환하여 사용하자)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> article <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'electriccars'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\narticle<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"3\"</span>\narticle<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>indexNumber<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"12314\"</span>\narticle<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"cars\"</span></code></pre></div>\n<p>각 속성은 문자열이며 읽거나 쓸 수 있다. 위의 경우에서 <code class=\"language-text\">article.dataset.columns = 5</code>와 같이 설정하면 해당 속성은 <code class=\"language-text\">\"5\"</code>로 변경된다.</p>\n<h2 id=\"css에서-접근하기\" style=\"position:relative;\"><a href=\"#css%EC%97%90%EC%84%9C-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\" aria-label=\"css에서 접근하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS에서 접근하기</h2>\n<p>데이터 속성은 HTML 속성이기 때문에 CSS에서도 접근할 수 있다. 예를 들어, 부모 데이터를 article에서 보여주려면 <code class=\"language-text\">attr</code> 함수를 사용하여 데이터 속성값을 넣고, <code class=\"language-text\">content</code> 속성과 함께 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">article::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span>data-parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">attr()</code> CSS 함수는 선택한 요소의 속성 값을 검색하여 스타일시트에 사용합니다. 또한 유사 요소에서 사용할 수 있으며, 이 경우 유사 요소의 원래 요소에 대한 속성 값이 반환됩니다.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/attr\">https://developer.mozilla.org/en-US/docs/Web/CSS/attr</a></p>\n</blockquote>\n<blockquote>\n</blockquote>\n<p>CSS의 속성 선택자도 데이터에 따라 스타일을 바꾸는데 사용할 수 있다. 데이터 값은 문자열이기 때문에, 스타일을 적용하려면 숫자 값은 선택자에 따옴표 안에 써주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">article[data-columns='3']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">article[data-columns='4']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"문제점\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제점</h2>\n<p><strong>눈에 보여야만 하고, 접근할 수 있어야하는 내용은 데이터 속성에 저장하지 않아야한다.</strong> 스크린 리더와 같은 보조 기술이 접근할 수 없기 때문이다. 또한 검색 크롤러가 데이터 속성의 값을 찾지 못할 수도 있다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes\">Using data attributes - Learn web development | MDN</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#html-%EB%AC%B8%EB%B2%95\">HTML 문법</a></li>\n<li><a href=\"#javascript%EC%97%90%EC%84%9C-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\">Javascript에서 접근하기</a></li>\n<li><a href=\"#css%EC%97%90%EC%84%9C-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\">CSS에서 접근하기</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\">문제점</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","excerpt":"데이터 속성이란? 속성은 특정한 데이터를 DOM 요소에 저장해두기 위한 목적으로 쓰인다. 브라우저는 이러한 데이터 속성에는 어떠한 행동도 관여하지 않기 때문에 개발자는 요소에 특정한 데이터를 저장하고 싶은 경우 자유롭게 사용할 수 있다. HTML 문법 어느 element에서나 로 시작하는 속성은 무엇이든 사용할 수 있다. 화면에 보이지 않게 글이나 추가 정보를 element에 담아 놓을 수 있다. 아래와 같이 사용하면 된다! Javascript에서 접근하기 이 속성 값들을 읽기 위해 를 사용하면 된다. 더 쉬운 방법으로  객체를 통해 읽어낼 수도 있다. (단,  뒷 부분을 CamelCase로 변환하여 사용하자) 각 속성은 문자열이며 읽거나 쓸 수 있다. 위의 경우에서 와 같이 설정하면 해당 속성은 로 변경된다. CSS에서 접근하기 데이터 속성은 HTML 속성이기 때문에 CSS에서도 접근할 수 있다. 예를 들어, 부모 데이터를 article에서 보여주려면  함수를 사용하여 데이터 속…","frontmatter":{"date":"March 02, 2023","title":"data 속성이란 무엇일까?","categories":"frontend","author":"leedawn","emoji":"💽"},"fields":{"slug":"/what-about-data-/"}},"next":{"id":"e8af381c-642f-5c10-808f-c927b25889e1","html":"<h1 id=\"part-1-전산-기초\" style=\"position:relative;\"><a href=\"#part-1-%EC%A0%84%EC%82%B0-%EA%B8%B0%EC%B4%88\" aria-label=\"part 1 전산 기초 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Part 1. 전산 기초</h1>\n<h2 id=\"-part-1-3-network\" style=\"position:relative;\"><a href=\"#-part-1-3-network\" aria-label=\" part 1 3 network permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Part 1-3 Network</h2>\n<p>자료구조 파트는 <a href=\"https://github.com/leedawnn/prepare_frontend_interview\">prepare_frontend_interview</a> 레포 보면서 정리했기 때문에 스킵.</p>\n<h3 id=\"http의-get과-post-비교\" style=\"position:relative;\"><a href=\"#http%EC%9D%98-get%EA%B3%BC-post-%EB%B9%84%EA%B5%90\" aria-label=\"http의 get과 post 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP의 GET과 POST 비교</h3>\n<h4 id=\"get\" style=\"position:relative;\"><a href=\"#get\" aria-label=\"get permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GET</h4>\n<p>우선 GET 방식은 요청하는 데이터가 <code class=\"language-text\">HTTP Request Message</code>의 Header 부분에 url이 담겨서 전송된다. 이러한 방식은 url이라는 공간에 담겨가기 때문에 전송할 수 있는 데이터의 크기가 제한적이다. 또 보안이 필요한 데이터에 대해서는 데이터가 url에 노출되므로 <code class=\"language-text\">GET</code> 방식은 적절하지 않다.(ex. password)</p>\n<h4 id=\"post\" style=\"position:relative;\"><a href=\"#post\" aria-label=\"post permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>POST</h4>\n<p>POST 방식의 request는 <code class=\"language-text\">HTTP Request Message</code>의 Body 부분에 데이터가 담겨서 전송된다. 데이터의 크기가 GET 방식보다 크고 보안면에서 낫다.(하지만 보안적인 측면에서는 암호화를 하지 않는 이상 고만고만하다고 함.)</p>\n<p>이러한 특성을 이해한 뒤 어디에 적용되는지를 알아보자. 우선 GET은 가져오는 것이다. 서버에서 어떤 데이터를 가져와서 보여준다거나 하는 용도이지 서버의 값이나 상태 등을 변경하지 않는다. 반면에 POST는 서버의 값이나 상태를 변경하기 위해서 또는 추가하기 위해서 사용된다.</p>\n<h4 id=\"먼저-tcpip란\" style=\"position:relative;\"><a href=\"#%EB%A8%BC%EC%A0%80-tcpip%EB%9E%80\" aria-label=\"먼저 tcpip란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>먼저… TCP/IP란?</h4>\n<p>인터넷에서 컴퓨터들이 서로 정보를 주고 받는데 쓰이는 프로토콜의 집합</p>\n<h3 id=\"tcp-3-way-handshake\" style=\"position:relative;\"><a href=\"#tcp-3-way-handshake\" aria-label=\"tcp 3 way handshake permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP 3-way Handshake</h3>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F225A964D52F1BB6917\" alt=\"\"></p>\n<p>TCP 3-way Handshake는 TCP/IP 프로토콜을 이용해서 통신을 하는 응용프로그램이 데이터를 전송하기 전에 먼저 정확한 전송을 보장하기 위해 상대방 컴퓨터와 사전에 세션을 수립하는 과정을 의미한다.</p>\n<h4 id=\"tcp-3-way-handshake의-역할\" style=\"position:relative;\"><a href=\"#tcp-3-way-handshake%EC%9D%98-%EC%97%AD%ED%95%A0\" aria-label=\"tcp 3 way handshake의 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP 3-way Handshake의 역할</h4>\n<ul>\n<li>Client와 Server 모두 데이터를 전송할 준비가 되었다는 것을 보장하고, 실제로 데이터 전달을 시작하기 전에 한 쪽이 다른 쪽에게 준비되었다는 것을 알 수 있도록 한다.</li>\n</ul>\n<h4 id=\"tcp의-3-way-handshake-과정\" style=\"position:relative;\"><a href=\"#tcp%EC%9D%98-3-way-handshake-%EA%B3%BC%EC%A0%95\" aria-label=\"tcp의 3 way handshake 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP의 3-way Handshake 과정</h4>\n<p><strong>[STEP 1]</strong></p>\n<p>A클라이언트는 B서버에 접속을 요청하는 SYN 패킷을 보낸다. 이때 A클라이언트는 SYN을 보내고 SYN/ACK 응답을 기다리는SYN_SENT 상태가 되는 것이다.</p>\n<p><strong>[STEP 2]</strong></p>\n<p>B서버는 SYN요청을 받고 A클라이언트에게 요청을 수락한다는 ACK와 SYN flag가 설정된 패킷을 발송하고 A가 다시 ACK으로 응답하기를 기다린다. 이때 B서버는 SYN_RECEIVED 상태가 된다.</p>\n<p><strong>[STEP 3]</strong></p>\n<p>A클라이언트는 B서버에게 ACK을 보내고 이후로부터는 연결이 이루어지고 데이터가 오가게 되는것이다. 이때의 B서버 상태가 ESTABLISHED 이다.</p>\n<p>위와 같은 방식으로 통신하는 것이 신뢰성 있는 연결을 맺어 준다는 TCP의 3 Way handshake 방식이다.</p>\n<h3 id=\"tcp와-udp의-비교\" style=\"position:relative;\"><a href=\"#tcp%EC%99%80-udp%EC%9D%98-%EB%B9%84%EA%B5%90\" aria-label=\"tcp와 udp의 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP와 UDP의 비교</h3>\n<h4 id=\"udp\" style=\"position:relative;\"><a href=\"#udp\" aria-label=\"udp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UDP</h4>\n<p>UDP는 <strong>비연결형 프로토콜</strong>이다. UDP는 TCP와는 다르게 헤더가 간단하며, 포트번호를 빼고 동일하다. UDP가 행하는 것은 포트들을 사용하여 IP 프로토콜에 인터페이스를 제공하는 것이다.</p>\n<h4 id=\"tcp\" style=\"position:relative;\"><a href=\"#tcp\" aria-label=\"tcp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP</h4>\n<p>TCP는 신뢰성이 없는 인터넷을 통해 종단간에 신뢰성 있는 바이트 스트림을 전송하도록 특별히 설계되었다. TCP 서비스는 송신자와 수신자 모두가 소켓이라고 부르는 종단점을 생성함으로써 이루어진다. TCP에서 연결 성정은 3-Way handshake를 통해 행해진다.</p>\n<h3 id=\"http와-https\" style=\"position:relative;\"><a href=\"#http%EC%99%80-https\" aria-label=\"http와 https permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP와 HTTPS</h3>\n<h4 id=\"http의-문제점\" style=\"position:relative;\"><a href=\"#http%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"http의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP의 문제점</h4>\n<ul>\n<li>HTTP는 평문 통신이기 때문에 도청이 가능하다.\n<ul>\n<li>평문으로 통신할 경우 메시지의 의미를 파악할 수 있기 때문에 암호화하여 통신해야 한다.</li>\n<li><strong>보완 방법)</strong> 통신 자체를 <code class=\"language-text\">SSL(Secure Socket Layer)</code> or <code class=\"language-text\">TLS(Transport Layer Security)</code>라는 다른 프로토콜을 조합함으로써 HTTP의 통신 내용을 암호화할 수 있다. SSL을 조합한 HTTP를 HTTPS라고 부른다.</li>\n</ul>\n</li>\n<li>통신 상대를 확인하지 않기 때문에 위장이 가능하다.\n<ul>\n<li>HTTP에 의한 통신에는 상대가 누구인지 확인하는 처리는 없기 때문에 누구든지 리퀘스트를 보낼 수 있다.</li>\n<li><strong>보완 방법)</strong> <code class=\"language-text\">SSL</code>로 상대를 확인할 수 있다. SSL은 상대를 확인하는 수단으로 <strong>증명서</strong>를 제공하고 있다. 증명서는 신뢰할 수 있는 제3자 기관에 의해 발행되는 것이기 때문에 서버나 클라이언트가 실재하는 사실을 증명한다. 이 증명서를 이용함으로써 통신 상대가 내가 통신하고자 하는 서버임을 나타내고 이용자는 개인 정보 누설 등의 위험성이 줄어들게 된다.</li>\n</ul>\n</li>\n<li>완전성을 증명할 수 없기 때문에 변조가 가능하다.\n<ul>\n<li>여기서 완전성이란 정보의 정확성을 의미한다. 서버 또는 클라이언트에서 수신한 내용이 송신측에서 보낸 내용과 일치한다라는 것을 보장할 수 없는 것이다. 리퀘스트나 리스폰스가 발신된 후에 상대가 수신하는 사이에 누군가에 의해 변조되더라도 이 사실을 알 수 없다. 이와 같이 공격자가 도중에 리퀘스트나 리스폰스를 빼앗아 변조하는 공격을 중간자 공격(Man-in-the-Middle)이라고 부른다.</li>\n<li><strong>보완 방법)</strong> HTTPS를 사용해야 한다. SSL에는 인증이나 암호화, 그리고 다이제스트 기능을 제공하고 있다.\n<blockquote>\n<p><strong>메시지 다이제스트</strong>는 메시지(데이터)의 해시값(다이제스트 값)을 계산하여 데이터와 함께 전송하는 방법입니다. 중간에 누군가가 패킷을 변조하더라도 다이제스트 값을 확인하면 데이터의 변조 사실을 확인할 수 있습니다. 데이터의 무결성을 보장해주는 방법입니다.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"https\" style=\"position:relative;\"><a href=\"#https\" aria-label=\"https permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTPS</h4>\n<p>HTTP에 SSL을 더하여 암호화와 인증, 완전성 보호를 통해 보안을 강화한 프로토콜이다.</p>\n<p><strong>모든 웹 페이지에서 HTTPS를 사용해도 될까?</strong></p>\n<p>평문 통신에 비해서 암호화 통신은 CPU나 메모리 등 리소스를 더 많이 요구한다. 통신할 때마다 암호화를 하면 추가적인 리소스를 소비하기 때문에 서버 한 대당 처리할 수 있는 request의 수가 상대적으로 줄어들게 된다.</p>\n<p>하지만 최근에는 하드웨어의 발달로 인해 HTTPS를 사용하더라도 속도 저하가 거의 일어나지 않으며, 새로운 표준인 HTTP 2.0을 함께 이용한다면 오히려 HTTPS가 HTTP보다 더 빠르게 동작한다.</p>\n<h3 id=\"dns-round-robin-방식\" style=\"position:relative;\"><a href=\"#dns-round-robin-%EB%B0%A9%EC%8B%9D\" aria-label=\"dns round robin 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DNS round robin 방식</h3>\n<h4 id=\"dns란\" style=\"position:relative;\"><a href=\"#dns%EB%9E%80\" aria-label=\"dns란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DNS란?</h4>\n<p>웹 서버 주소에 해당하는 IP 테이블을 가지고 있는 서버라고 보면 된다.</p>\n<p>예를 들자면, 네이버에 접속하려고 한다고 해보자. 우리는 원칙적으로 네이버의 IP 주소를 알고 있어야 하며, 그 주소를 통하여 접속해야 한다. 하지만 우리는 <code class=\"language-text\">naver.com</code>을 입력하여 들어간다. 이것이 되는 이유는 DNS server가 <code class=\"language-text\">naver.com</code>이 가리키는 IP 주소를 브라우저에게 반환하기 때문이다.</p>\n<h4 id=\"dns-round-robin이란\" style=\"position:relative;\"><a href=\"#dns-round-robin%EC%9D%B4%EB%9E%80\" aria-label=\"dns round robin이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DNS Round Robin이란?</h4>\n<p>round robin 이란 DNS 서버 구성 방식 중 하나이다. Domain에 대한 IP 요청 쿼리 시 round-robin 방식으로 IP를 반환합니다.</p>\n<p>일반적으로 Round Robin이란, 시분할 시스템을 위해 설계된 선점형 스케줄링의 하나로서, 프로세스들 사이에 우선순위를 두지 않고, 순서대로 시간단위로 CPU를 할당하는 방식의 CPU 스케줄링 알고리즘이다. 각 프로세스에 일정시간을 할당하고, 할당된 시간이 지나면 그 프로세스는 잠시 보류한 뒤 다른 프로세스에게 기회를 주고, 또 그 다음 프로세스에게 하는 식으로, 돌아가며 기회를 부여하는 운영방식이라 풀어 말할 수 있겠다.</p>\n<h4 id=\"dns-round-robin-방식의-문제점\" style=\"position:relative;\"><a href=\"#dns-round-robin-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"dns round robin 방식의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DNS Round Robin 방식의 문제점</h4>\n<ol>\n<li>서버의 수만큼 공인 IP 주소가 필요하다. 부하 분산을 위해 서버의 대수를 늘리기 위해서는 그 만큼의 공인 IP가 필요하다.</li>\n<li>균등하게 분산되지 않는다. 모바일 사이트 등에서 문제가 될 수 있는데, 스마트폰의 접속은 캐리어 게이트웨이라고 하는 proxy 서버를 경유한다. proxy 서버에서는 이름 변환 결과가 일정 시간 동안 캐싱되므로 같은 프록시 서버를 경유하는 접속은 항상 같은 서버로 접속된다.</li>\n<li>서버가 다운되도 확인이 불가하다. DNS 서버는 웹 서버의 부하나 접속 수 등의 상황에 따라 질의 결과를 제어할 수 없다.</li>\n</ol>\n<p>Round Robin 방식을 기반으로 단점을 해소하는 DNS 스케줄링 알고리즘이 존재한다. (Weighted round robin (WRR), Least connection 등)</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-part-1-3-network\">💡 Part 1-3 Network</a></p>\n<ul>\n<li>\n<p><a href=\"#http%EC%9D%98-get%EA%B3%BC-post-%EB%B9%84%EA%B5%90\">HTTP의 GET과 POST 비교</a></p>\n<ul>\n<li><a href=\"#get\">GET</a></li>\n<li><a href=\"#post\">POST</a></li>\n<li><a href=\"#%EB%A8%BC%EC%A0%80-tcpip%EB%9E%80\">먼저… TCP/IP란?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tcp-3-way-handshake\">TCP 3-way Handshake</a></p>\n<ul>\n<li><a href=\"#tcp-3-way-handshake%EC%9D%98-%EC%97%AD%ED%95%A0\">TCP 3-way Handshake의 역할</a></li>\n<li><a href=\"#tcp%EC%9D%98-3-way-handshake-%EA%B3%BC%EC%A0%95\">TCP의 3-way Handshake 과정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tcp%EC%99%80-udp%EC%9D%98-%EB%B9%84%EA%B5%90\">TCP와 UDP의 비교</a></p>\n<ul>\n<li><a href=\"#udp\">UDP</a></li>\n<li><a href=\"#tcp\">TCP</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#http%EC%99%80-https\">HTTP와 HTTPS</a></p>\n<ul>\n<li><a href=\"#http%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\">HTTP의 문제점</a></li>\n<li><a href=\"#https\">HTTPS</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dns-round-robin-%EB%B0%A9%EC%8B%9D\">DNS round robin 방식</a></p>\n<ul>\n<li><a href=\"#dns%EB%9E%80\">DNS란?</a></li>\n<li><a href=\"#dns-round-robin%EC%9D%B4%EB%9E%80\">DNS Round Robin이란?</a></li>\n<li><a href=\"#dns-round-robin-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\">DNS Round Robin 방식의 문제점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 28, 2023","title":"프론트엔드 면접 대비 Part1. CS","categories":"interview","author":"leedawn","emoji":"🤡"},"fields":{"slug":"/prepare-interview-02/"}},"prev":{"id":"8bc95de7-58e8-5d2b-80db-29ff4b916149","html":"<h2 id=\"어그러게요\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EA%B7%B8%EB%9F%AC%EA%B2%8C%EC%9A%94\" aria-label=\"어그러게요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어…그러게요…?</h2>\n<p>동공 지진을 일으킨 면접 질문이다. 언젠가 자바스크립트 공부를 하면서 보았던 질문이었고, 분명 그 글을 자세하게 읽었던 기억은 나는데..\n내 머릿 속에는 아무것도 남아있지 않았다 😇</p>\n<p>싱글 스레드 기반인 자바스크립트가 어떻게 비동기를 구현했을까?</p>\n<h2 id=\"자바스크립트는-싱글-스레드-기반-언어가-맞나요\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%8B%B1%EA%B8%80-%EC%8A%A4%EB%A0%88%EB%93%9C-%EA%B8%B0%EB%B0%98-%EC%96%B8%EC%96%B4%EA%B0%80-%EB%A7%9E%EB%82%98%EC%9A%94\" aria-label=\"자바스크립트는 싱글 스레드 기반 언어가 맞나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트는 싱글 스레드 기반 언어가 맞나요?</h2>\n<p><strong>Yes! 자바스크립트는 싱글 스레드 기반 언어이다.</strong> 코드 실행 중 하나의 코드에서 멈추거나 걸리면 다음으로 진행할 수 없다. 이러한 일이 발생하는 대표적인 예로 alert가 있다. <code class=\"language-text\">alert('Hello Wrold');</code></p>\n<p>alert 창에서 확인을 누르기 전까지는 웹 페이지와 상호 작용을 할 수 없다.</p>\n<h2 id=\"그렇다면-자바스크립트로-어떻게-비동기를-구현할-수-있는-것일까-\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B9%84%EB%8F%99%EA%B8%B0%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EA%B2%83%EC%9D%BC%EA%B9%8C-\" aria-label=\"그렇다면 자바스크립트로 어떻게 비동기를 구현할 수 있는 것일까  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면, 자바스크립트로 어떻게 비동기를 구현할 수 있는 것일까? 🤨</h2>\n<p>프론트엔드 관점에서 자바스크립트 코드는 반드시 브라우저를 통해 실행된다. 이 브라우저에 내장되어 있는 기능인 <strong>이벤트 루프(event loop)</strong> 덕분에 싱글 스레드 언어인 자바스크립트가 우리 눈으로 보기엔 동시성(Concurrency)을 갖는 작업을 해내는 것으로 보이게 된다.</p>\n<p>브라우저의 환경을 그림으로 표현하면 아래와 같다.</p>\n<p><img src=\"https://poiemaweb.com/img/event-loop.png\" alt=\"\"></p>\n<p>이처럼 콜 스택과 힙으로 구성되어 있는 자바스크립트 엔진은 단순히 task가 요청되면 콜 스택을 통해 요청된 작업을 순차적으로 실행할 뿐이다.</p>\n<blockquote>\n<p><strong>Call Stack(호출 스택)</strong><br>\n작업이 요청되면(함수가 호출되면) 요청된 작업은 순차적으로 Call Stack에 쌓이게 되고 순차적으로 실행된다. 자바스크립트는 단 하나의 Call Stack을 사용하기 때문에 해당 task가 종료되기 전까지는 다른 어떤 task도 수행될 수 없다.</p>\n</blockquote>\n<blockquote>\n<p><strong>Heap</strong><br>\n동적으로 생성된 객체 인스턴스가 할당되는 영역이다.</p>\n</blockquote>\n<p><strong>비동기 처리에서 소스코드의 평가와 실행을 제외한 모든 처리는 자바스크립트 엔진을 구동하는 환경인 브라우저 또는 Node.js가 담당한다.</strong></p>\n<p>이를 위해 브라우저 환경은 <strong>태스크 큐</strong>와 <strong>이벤트 루프</strong>를 제공한다.</p>\n<blockquote>\n<p><strong>태스크 큐(task queue)</strong><br>\nsetTimeout 이나 setinterval과 같은 비동기 함수의 콜백 함수 또는 이벤트 핸들러가 일시적으로 보관되는 영역이다.</p>\n</blockquote>\n<blockquote>\n<p><strong>이벤트 루프(event loop)</strong><br>\n이벤트 루프는 콜 스택에 현재 실행 중인 실행 컨텍스트가 있는지, 그리고 태스크 큐에 대기 중인 함수(콜백 함수, 이벤트 핸들러 등)가 있는지 반복해서 확인한다. 만약 콜 스택이 비어있고 태스크 큐에 대기 중인 함수가 있다면 이벤트 루프는 순차적(FIFO)으로 태스크 큐에 대기 중인 함수를 콜 스택으로 이동시킨다. 즉, 태스크 큐에 일시 보관된 함수들은 비동기 처리 방식으로 동작한다.</p>\n</blockquote>\n<p>브라우저 환경에서 아래의 코드가 어떻게 동작할지 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0초(실제는 4ms) 후에 호출됨</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>콜 스택에 setTimeout 함수가 콜 스택에 담긴다.</li>\n<li>setTimeout 함수가 실행되면 콜 스택에서 pop된다. 이때 타이머가 만료되면 콜백 함수를 태스크 큐에 푸시하는 것은 브라우저의 역할이다.</li>\n<li>브라우저가 수행하는 4번과 자바스크립트 엔진이 수행하는 5번은 병행 처리된다.</li>\n<li>브라우저는 타이머가 만료되면 콜백 함수 foo가 태스크 큐에 푸시된다. 4ms 후에 콜백 함수 foo가 태스크 큐에 푸시되어 대기하게 된다.</li>\n<li>bar 함수가 콜 스택에 담긴다. 이후 bar 함수가 종료되어 콜 스택에서 pop된다. 이때 브라우저가 타이머를 설정한 후 4ms가 경과했다면 foo 함수는 아직 태스크 큐에서 대기 중이다.</li>\n<li>이후 foo 함수가 종료되어 콜 스택에서 pop된다.</li>\n</ol>\n<p>이처럼 비동기 함수인 setTimeout의 콜백 함수는 태스크 큐에 푸시되어 대기하다가 콜 스택이 비게 되면, 다시 말해 전역 코드 및 명시적으로 호출된 함수가 모두 종료하면 비로소 콜 스택에 푸시되어 실행된다.</p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>자바스크립트는 싱글 스레드 방식으로 동작한다. 이때 싱글 스레드 방식으로 동작하는 것은 브라우저가 아니라, 브라우저에 내장된 자바스크립트 엔진이라는 것에 주의해야한다. 만약 모든 자바스크립트 코드가 자바스크립트 엔진에서 싱글 스레드 방식으로 동작한다면 자바스크립트는 비동기로 동작할 수 없다. <strong>즉, 자바스크립트 엔진은 싱글 스레드로 동작하지만 브라우저(또는 Node.js와 같은 런타임 환경)는 멀티 스레드로 동작한다.</strong></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%96%B4%EA%B7%B8%EB%9F%AC%EA%B2%8C%EC%9A%94\">어…그러게요…?</a></li>\n<li><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%8B%B1%EA%B8%80-%EC%8A%A4%EB%A0%88%EB%93%9C-%EA%B8%B0%EB%B0%98-%EC%96%B8%EC%96%B4%EA%B0%80-%EB%A7%9E%EB%82%98%EC%9A%94\">자바스크립트는 싱글 스레드 기반 언어가 맞나요?</a></li>\n<li><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B9%84%EB%8F%99%EA%B8%B0%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EA%B2%83%EC%9D%BC%EA%B9%8C-\">그렇다면, 자바스크립트로 어떻게 비동기를 구현할 수 있는 것일까? 🤨</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 09, 2023","title":"자바스크립트는 싱글 스레드인데 어떻게 비동기가 가능할까요?","categories":"JS","author":"leedawn","emoji":"🦊"},"fields":{"slug":"/so-why-is-js-asynchronous/"}},"site":{"siteMetadata":{"siteUrl":"https://leedawnn.github.io","comments":{"utterances":{"repo":"leedawnn/leedawnn.github.io"}}}}},"pageContext":{"slug":"/what-about-data-/","nextSlug":"/prepare-interview-02/","prevSlug":"/so-why-is-js-asynchronous/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}