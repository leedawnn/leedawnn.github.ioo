{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/prepare-interview-02/",
    "result": {"data":{"cur":{"id":"e8af381c-642f-5c10-808f-c927b25889e1","html":"<h1 id=\"part-1-전산-기초\" style=\"position:relative;\"><a href=\"#part-1-%EC%A0%84%EC%82%B0-%EA%B8%B0%EC%B4%88\" aria-label=\"part 1 전산 기초 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Part 1. 전산 기초</h1>\n<h2 id=\"-part-1-3-network\" style=\"position:relative;\"><a href=\"#-part-1-3-network\" aria-label=\" part 1 3 network permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Part 1-3 Network</h2>\n<p>자료구조 파트는 <a href=\"https://github.com/leedawnn/prepare_frontend_interview\">prepare_frontend_interview</a> 레포 보면서 정리했기 때문에 스킵.</p>\n<h3 id=\"http의-get과-post-비교\" style=\"position:relative;\"><a href=\"#http%EC%9D%98-get%EA%B3%BC-post-%EB%B9%84%EA%B5%90\" aria-label=\"http의 get과 post 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP의 GET과 POST 비교</h3>\n<h4 id=\"get\" style=\"position:relative;\"><a href=\"#get\" aria-label=\"get permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GET</h4>\n<p>우선 GET 방식은 요청하는 데이터가 <code class=\"language-text\">HTTP Request Message</code>의 Header 부분에 url이 담겨서 전송된다. 이러한 방식은 url이라는 공간에 담겨가기 때문에 전송할 수 있는 데이터의 크기가 제한적이다. 또 보안이 필요한 데이터에 대해서는 데이터가 url에 노출되므로 <code class=\"language-text\">GET</code> 방식은 적절하지 않다.(ex. password)</p>\n<h4 id=\"post\" style=\"position:relative;\"><a href=\"#post\" aria-label=\"post permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>POST</h4>\n<p>POST 방식의 request는 <code class=\"language-text\">HTTP Request Message</code>의 Body 부분에 데이터가 담겨서 전송된다. 데이터의 크기가 GET 방식보다 크고 보안면에서 낫다.(하지만 보안적인 측면에서는 암호화를 하지 않는 이상 고만고만하다고 함.)</p>\n<p>이러한 특성을 이해한 뒤 어디에 적용되는지를 알아보자. 우선 GET은 가져오는 것이다. 서버에서 어떤 데이터를 가져와서 보여준다거나 하는 용도이지 서버의 값이나 상태 등을 변경하지 않는다. 반면에 POST는 서버의 값이나 상태를 변경하기 위해서 또는 추가하기 위해서 사용된다.</p>\n<h4 id=\"먼저-tcpip란\" style=\"position:relative;\"><a href=\"#%EB%A8%BC%EC%A0%80-tcpip%EB%9E%80\" aria-label=\"먼저 tcpip란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>먼저… TCP/IP란?</h4>\n<p>인터넷에서 컴퓨터들이 서로 정보를 주고 받는데 쓰이는 프로토콜의 집합</p>\n<h3 id=\"tcp-3-way-handshake\" style=\"position:relative;\"><a href=\"#tcp-3-way-handshake\" aria-label=\"tcp 3 way handshake permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP 3-way Handshake</h3>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F225A964D52F1BB6917\" alt=\"\"></p>\n<p>TCP 3-way Handshake는 TCP/IP 프로토콜을 이용해서 통신을 하는 응용프로그램이 데이터를 전송하기 전에 먼저 정확한 전송을 보장하기 위해 상대방 컴퓨터와 사전에 세션을 수립하는 과정을 의미한다.</p>\n<h4 id=\"tcp-3-way-handshake의-역할\" style=\"position:relative;\"><a href=\"#tcp-3-way-handshake%EC%9D%98-%EC%97%AD%ED%95%A0\" aria-label=\"tcp 3 way handshake의 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP 3-way Handshake의 역할</h4>\n<ul>\n<li>Client와 Server 모두 데이터를 전송할 준비가 되었다는 것을 보장하고, 실제로 데이터 전달을 시작하기 전에 한 쪽이 다른 쪽에게 준비되었다는 것을 알 수 있도록 한다.</li>\n</ul>\n<h4 id=\"tcp의-3-way-handshake-과정\" style=\"position:relative;\"><a href=\"#tcp%EC%9D%98-3-way-handshake-%EA%B3%BC%EC%A0%95\" aria-label=\"tcp의 3 way handshake 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP의 3-way Handshake 과정</h4>\n<p><strong>[STEP 1]</strong></p>\n<p>A클라이언트는 B서버에 접속을 요청하는 SYN 패킷을 보낸다. 이때 A클라이언트는 SYN을 보내고 SYN/ACK 응답을 기다리는SYN_SENT 상태가 되는 것이다.</p>\n<p><strong>[STEP 2]</strong></p>\n<p>B서버는 SYN요청을 받고 A클라이언트에게 요청을 수락한다는 ACK와 SYN flag가 설정된 패킷을 발송하고 A가 다시 ACK으로 응답하기를 기다린다. 이때 B서버는 SYN_RECEIVED 상태가 된다.</p>\n<p><strong>[STEP 3]</strong></p>\n<p>A클라이언트는 B서버에게 ACK을 보내고 이후로부터는 연결이 이루어지고 데이터가 오가게 되는것이다. 이때의 B서버 상태가 ESTABLISHED 이다.</p>\n<p>위와 같은 방식으로 통신하는 것이 신뢰성 있는 연결을 맺어 준다는 TCP의 3 Way handshake 방식이다.</p>\n<h3 id=\"tcp와-udp의-비교\" style=\"position:relative;\"><a href=\"#tcp%EC%99%80-udp%EC%9D%98-%EB%B9%84%EA%B5%90\" aria-label=\"tcp와 udp의 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP와 UDP의 비교</h3>\n<h4 id=\"udp\" style=\"position:relative;\"><a href=\"#udp\" aria-label=\"udp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UDP</h4>\n<p>UDP는 <strong>비연결형 프로토콜</strong>이다. UDP는 TCP와는 다르게 헤더가 간단하며, 포트번호를 빼고 동일하다. UDP가 행하는 것은 포트들을 사용하여 IP 프로토콜에 인터페이스를 제공하는 것이다.</p>\n<h4 id=\"tcp\" style=\"position:relative;\"><a href=\"#tcp\" aria-label=\"tcp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP</h4>\n<p>TCP는 신뢰성이 없는 인터넷을 통해 종단간에 신뢰성 있는 바이트 스트림을 전송하도록 특별히 설계되었다. TCP 서비스는 송신자와 수신자 모두가 소켓이라고 부르는 종단점을 생성함으로써 이루어진다. TCP에서 연결 성정은 3-Way handshake를 통해 행해진다.</p>\n<h3 id=\"http와-https\" style=\"position:relative;\"><a href=\"#http%EC%99%80-https\" aria-label=\"http와 https permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP와 HTTPS</h3>\n<h4 id=\"http의-문제점\" style=\"position:relative;\"><a href=\"#http%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"http의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP의 문제점</h4>\n<ul>\n<li>HTTP는 평문 통신이기 때문에 도청이 가능하다.\n<ul>\n<li>평문으로 통신할 경우 메시지의 의미를 파악할 수 있기 때문에 암호화하여 통신해야 한다.</li>\n<li><strong>보완 방법)</strong> 통신 자체를 <code class=\"language-text\">SSL(Secure Socket Layer)</code> or <code class=\"language-text\">TLS(Transport Layer Security)</code>라는 다른 프로토콜을 조합함으로써 HTTP의 통신 내용을 암호화할 수 있다. SSL을 조합한 HTTP를 HTTPS라고 부른다.</li>\n</ul>\n</li>\n<li>통신 상대를 확인하지 않기 때문에 위장이 가능하다.\n<ul>\n<li>HTTP에 의한 통신에는 상대가 누구인지 확인하는 처리는 없기 때문에 누구든지 리퀘스트를 보낼 수 있다.</li>\n<li><strong>보완 방법)</strong> <code class=\"language-text\">SSL</code>로 상대를 확인할 수 있다. SSL은 상대를 확인하는 수단으로 <strong>증명서</strong>를 제공하고 있다. 증명서는 신뢰할 수 있는 제3자 기관에 의해 발행되는 것이기 때문에 서버나 클라이언트가 실재하는 사실을 증명한다. 이 증명서를 이용함으로써 통신 상대가 내가 통신하고자 하는 서버임을 나타내고 이용자는 개인 정보 누설 등의 위험성이 줄어들게 된다.</li>\n</ul>\n</li>\n<li>완전성을 증명할 수 없기 때문에 변조가 가능하다.\n<ul>\n<li>여기서 완전성이란 정보의 정확성을 의미한다. 서버 또는 클라이언트에서 수신한 내용이 송신측에서 보낸 내용과 일치한다라는 것을 보장할 수 없는 것이다. 리퀘스트나 리스폰스가 발신된 후에 상대가 수신하는 사이에 누군가에 의해 변조되더라도 이 사실을 알 수 없다. 이와 같이 공격자가 도중에 리퀘스트나 리스폰스를 빼앗아 변조하는 공격을 중간자 공격(Man-in-the-Middle)이라고 부른다.</li>\n<li><strong>보완 방법)</strong> HTTPS를 사용해야 한다. SSL에는 인증이나 암호화, 그리고 다이제스트 기능을 제공하고 있다.\n<blockquote>\n<p><strong>메시지 다이제스트</strong>는 메시지(데이터)의 해시값(다이제스트 값)을 계산하여 데이터와 함께 전송하는 방법입니다. 중간에 누군가가 패킷을 변조하더라도 다이제스트 값을 확인하면 데이터의 변조 사실을 확인할 수 있습니다. 데이터의 무결성을 보장해주는 방법입니다.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"https\" style=\"position:relative;\"><a href=\"#https\" aria-label=\"https permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTPS</h4>\n<p>HTTP에 SSL을 더하여 암호화와 인증, 완전성 보호를 통해 보안을 강화한 프로토콜이다.</p>\n<p><strong>모든 웹 페이지에서 HTTPS를 사용해도 될까?</strong></p>\n<p>평문 통신에 비해서 암호화 통신은 CPU나 메모리 등 리소스를 더 많이 요구한다. 통신할 때마다 암호화를 하면 추가적인 리소스를 소비하기 때문에 서버 한 대당 처리할 수 있는 request의 수가 상대적으로 줄어들게 된다.</p>\n<p>하지만 최근에는 하드웨어의 발달로 인해 HTTPS를 사용하더라도 속도 저하가 거의 일어나지 않으며, 새로운 표준인 HTTP 2.0을 함께 이용한다면 오히려 HTTPS가 HTTP보다 더 빠르게 동작한다.</p>\n<h3 id=\"dns-round-robin-방식\" style=\"position:relative;\"><a href=\"#dns-round-robin-%EB%B0%A9%EC%8B%9D\" aria-label=\"dns round robin 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DNS round robin 방식</h3>\n<h4 id=\"dns란\" style=\"position:relative;\"><a href=\"#dns%EB%9E%80\" aria-label=\"dns란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DNS란?</h4>\n<p>웹 서버 주소에 해당하는 IP 테이블을 가지고 있는 서버라고 보면 된다.</p>\n<p>예를 들자면, 네이버에 접속하려고 한다고 해보자. 우리는 원칙적으로 네이버의 IP 주소를 알고 있어야 하며, 그 주소를 통하여 접속해야 한다. 하지만 우리는 <code class=\"language-text\">naver.com</code>을 입력하여 들어간다. 이것이 되는 이유는 DNS server가 <code class=\"language-text\">naver.com</code>이 가리키는 IP 주소를 브라우저에게 반환하기 때문이다.</p>\n<h4 id=\"dns-round-robin이란\" style=\"position:relative;\"><a href=\"#dns-round-robin%EC%9D%B4%EB%9E%80\" aria-label=\"dns round robin이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DNS Round Robin이란?</h4>\n<p>round robin 이란 DNS 서버 구성 방식 중 하나이다. Domain에 대한 IP 요청 쿼리 시 round-robin 방식으로 IP를 반환합니다.</p>\n<p>일반적으로 Round Robin이란, 시분할 시스템을 위해 설계된 선점형 스케줄링의 하나로서, 프로세스들 사이에 우선순위를 두지 않고, 순서대로 시간단위로 CPU를 할당하는 방식의 CPU 스케줄링 알고리즘이다. 각 프로세스에 일정시간을 할당하고, 할당된 시간이 지나면 그 프로세스는 잠시 보류한 뒤 다른 프로세스에게 기회를 주고, 또 그 다음 프로세스에게 하는 식으로, 돌아가며 기회를 부여하는 운영방식이라 풀어 말할 수 있겠다.</p>\n<h4 id=\"dns-round-robin-방식의-문제점\" style=\"position:relative;\"><a href=\"#dns-round-robin-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"dns round robin 방식의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DNS Round Robin 방식의 문제점</h4>\n<ol>\n<li>서버의 수만큼 공인 IP 주소가 필요하다. 부하 분산을 위해 서버의 대수를 늘리기 위해서는 그 만큼의 공인 IP가 필요하다.</li>\n<li>균등하게 분산되지 않는다. 모바일 사이트 등에서 문제가 될 수 있는데, 스마트폰의 접속은 캐리어 게이트웨이라고 하는 proxy 서버를 경유한다. proxy 서버에서는 이름 변환 결과가 일정 시간 동안 캐싱되므로 같은 프록시 서버를 경유하는 접속은 항상 같은 서버로 접속된다.</li>\n<li>서버가 다운되도 확인이 불가하다. DNS 서버는 웹 서버의 부하나 접속 수 등의 상황에 따라 질의 결과를 제어할 수 없다.</li>\n</ol>\n<p>Round Robin 방식을 기반으로 단점을 해소하는 DNS 스케줄링 알고리즘이 존재한다. (Weighted round robin (WRR), Least connection 등)</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-part-1-3-network\">💡 Part 1-3 Network</a></p>\n<ul>\n<li>\n<p><a href=\"#http%EC%9D%98-get%EA%B3%BC-post-%EB%B9%84%EA%B5%90\">HTTP의 GET과 POST 비교</a></p>\n<ul>\n<li><a href=\"#get\">GET</a></li>\n<li><a href=\"#post\">POST</a></li>\n<li><a href=\"#%EB%A8%BC%EC%A0%80-tcpip%EB%9E%80\">먼저… TCP/IP란?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tcp-3-way-handshake\">TCP 3-way Handshake</a></p>\n<ul>\n<li><a href=\"#tcp-3-way-handshake%EC%9D%98-%EC%97%AD%ED%95%A0\">TCP 3-way Handshake의 역할</a></li>\n<li><a href=\"#tcp%EC%9D%98-3-way-handshake-%EA%B3%BC%EC%A0%95\">TCP의 3-way Handshake 과정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tcp%EC%99%80-udp%EC%9D%98-%EB%B9%84%EA%B5%90\">TCP와 UDP의 비교</a></p>\n<ul>\n<li><a href=\"#udp\">UDP</a></li>\n<li><a href=\"#tcp\">TCP</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#http%EC%99%80-https\">HTTP와 HTTPS</a></p>\n<ul>\n<li><a href=\"#http%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\">HTTP의 문제점</a></li>\n<li><a href=\"#https\">HTTPS</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dns-round-robin-%EB%B0%A9%EC%8B%9D\">DNS round robin 방식</a></p>\n<ul>\n<li><a href=\"#dns%EB%9E%80\">DNS란?</a></li>\n<li><a href=\"#dns-round-robin%EC%9D%B4%EB%9E%80\">DNS Round Robin이란?</a></li>\n<li><a href=\"#dns-round-robin-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\">DNS Round Robin 방식의 문제점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"Part 1. 전산 기초 💡 Part 1-3 Network 자료구조 파트는 prepare_frontend_interview 레포 보면서 정리했기 때문에 스킵. HTTP의 GET과 POST 비교 GET 우선 GET 방식은 요청하는 데이터가 의 Header 부분에 url이 담겨서 전송된다. 이러한 방식은 url이라는 공간에 담겨가기 때문에 전송할 수 있는 데이터의 크기가 제한적이다. 또 보안이 필요한 데이터에 대해서는 데이터가 url에 노출되므로  방식은 적절하지 않다.(ex. password) POST POST 방식의 request는 의 Body 부분에 데이터가 담겨서 전송된다. 데이터의 크기가 GET 방식보다 크고 보안면에서 낫다.(하지만 보안적인 측면에서는 암호화를 하지 않는 이상 고만고만하다고 함.) 이러한 특성을 이해한 뒤 어디에 적용되는지를 알아보자. 우선 GET은 가져오는 것이다. 서버에서 어떤 데이터를 가져와서 보여준다거나 하는 용도이지 서버의 값이나 상태 등을 변경하지…","frontmatter":{"date":"January 28, 2023","title":"프론트엔드 면접 대비 Part1. CS","categories":"interview","author":"leedawn","emoji":"🤡"},"fields":{"slug":"/prepare-interview-02/"}},"next":{"id":"98188b37-4f37-56b2-b12a-e30e86391164","html":"<p>프론트엔드 면접을 준비하기 위해 <a href=\"https://github.com/JaeYeopHan/Interview_Question_for_Beginner\">Interview_Question_for_Beginner</a> 레포를 보며 정리하려고 한다,, 😬</p>\n<h1 id=\"part-1-전산-기초\" style=\"position:relative;\"><a href=\"#part-1-%EC%A0%84%EC%82%B0-%EA%B8%B0%EC%B4%88\" aria-label=\"part 1 전산 기초 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Part 1. 전산 기초</h1>\n<h2 id=\"-part-1-1-development-common-sense\" style=\"position:relative;\"><a href=\"#-part-1-1-development-common-sense\" aria-label=\" part 1 1 development common sense permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Part 1-1 Development common sense</h2>\n<h3 id=\"좋은-코드란-무엇인가\" style=\"position:relative;\"><a href=\"#%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"좋은 코드란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>좋은 코드란 무엇인가?</h3>\n<p>이 질문은 자신만의 코드 철학?을 물어보는 것 같다. 개인마다 ‘좋은 코드’의 기준이 다르고, 각각의 경험을 기반으로 좋은 코드를 정의하고 있다.</p>\n<ul>\n<li>읽기 쉬운 코드</li>\n<li>일관성 있는 코드</li>\n<li>확장 가능한 코드</li>\n</ul>\n<h3 id=\"객체-지향-프로그래밍이란-무엇인가\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"객체 지향 프로그래밍이란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 지향 프로그래밍이란 무엇인가?</h3>\n<p>객체 지향 프로그래밍(Object-Oriented Programming, OOP)은 프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체로 만들고, 객체들간의 상호작용을 통해 로직을 구성하는 프로그래밍 방법이다.</p>\n<h4 id=\"객체-지향-프로그래밍의-특징\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"객체 지향 프로그래밍의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 지향 프로그래밍의 특징</h4>\n<ol>\n<li>추상화\n<ul>\n<li>객체에서 공통된 속성과 행위를 추출하는 것</li>\n<li>추상화는 불필요한 정보는 숨기고 중요한 정보만을 표현함으로써 프로그램을 간단하게 만드는 것\n<blockquote>\n<p>아우디, 니싼, 볼보는 모두 ‘자동차’에 해당된다. 자동차라는 추상화 집합을 만들어두고 자동차들이 가진 공통적인 특징들을 만들어서 활용한다.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>캡슐화\n<ul>\n<li>데이터 구조와 데이터를 다루는 방법들을 결합시켜 묶는 것(변수와 함수를 하나로 묶는 것을 뜻함)</li>\n<li>낮은 결합도를 유지할 수 있도록 설계하는 것</li>\n</ul>\n</li>\n<li>상속\n<ul>\n<li>새로운 클래스가 기존의 클래스의 데이터와 연산을 이용할 수 있게 하는 것</li>\n</ul>\n</li>\n<li>다형성\n<ul>\n<li>하나의 변수명, 함수명이 상황에 따라 다른 의미로 해석될 수 있는 것</li>\n<li>객체 지향 프로그래밍은 하나의 클래스 내부에 같은 이름의 행위를 여러개 정의하거나 상위 클래스의 행위를 하위 클래스에서 재정의하여 사용할 수 있기 때문에 다형성이라는 특징을 갖게 된다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"restful-api-란\" style=\"position:relative;\"><a href=\"#restful-api-%EB%9E%80\" aria-label=\"restful api 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTFul API 란?</h3>\n<p><code class=\"language-text\">REST</code>란, REpresentational State Transfer 의 약자이다. 즉, REST의 기본 원칙을 성실히 지킨 서비스 디자인은 ‘RESTful’하다고 표현할 수 있다. 또한 REST는 <code class=\"language-text\">Resource Oriented Architecture</code>이다. API 설계의 중심에 자원(Resource)가 있고, HTTP Method를 통해 자원을 처리하도록 설계하는 것이다.</p>\n<h4 id=\"restful하게-api를-디자인-한다는-것은-무엇을-의미하는가\" style=\"position:relative;\"><a href=\"#restful%ED%95%98%EA%B2%8C-api%EB%A5%BC-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%95%9C%EB%8B%A4%EB%8A%94-%EA%B2%83%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%9D%98%EB%AF%B8%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"restful하게 api를 디자인 한다는 것은 무엇을 의미하는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful하게 API를 디자인 한다는 것은 무엇을 의미하는가</h4>\n<ol>\n<li><strong>리소스</strong>와 <strong>행위</strong>를 명시적이고 직관적으로 분리한다.\n<ul>\n<li>리소스는 <code class=\"language-text\">URI</code>로 표현되는데 리소스가 가리키는 것은 <code class=\"language-text\">명사</code>로 표현되어야 한다.</li>\n<li>행위는 HTTP Method로 표현하고, GET(조회), POST(생성), PUT(기존 entity 전체 수정), PATCH(기존 entity 일부 수정), DELETE(삭제)을 분명한 목적으로 사용한다.</li>\n</ul>\n</li>\n<li>Message는 Header와 Body를 명확하게 분리해서 사용한다.\n<ul>\n<li>Entity 에 대한 내용은 body 에 담는다.</li>\n<li>애플리케이션 서버가 행동할 판단의 근거가 되는 컨트롤 정보인 API 버전 정보, 응답받고자 하는 MIME 타입 등은 header 에 담는다.</li>\n<li>header 와 body는 http header와 http body로 나눌 수도 있고, http body에 들어가는 json 구조로 분리할 수도 있다.</li>\n</ul>\n</li>\n<li>API 버전을 관리한다.</li>\n<li>서버와 클라이언트가 같은 방식을 사용해서 요청하도록 한다.</li>\n</ol>\n<h4 id=\"어떠한-장점이-존재하는가\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%A0%ED%95%9C-%EC%9E%A5%EC%A0%90%EC%9D%B4-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"어떠한 장점이 존재하는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떠한 장점이 존재하는가?</h4>\n<ol>\n<li>Open API를 제공하기 쉽다.</li>\n<li>멀티플랫폼 지원 및 연동이 용이하다.</li>\n<li>원하는 타입으로 데이터를 주고 받을 수 있다.</li>\n<li>기존 웹 인프라(HTTP)를 그대로 사용할 수 있다.</li>\n</ol>\n<h4 id=\"단점은\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90%EC%9D%80\" aria-label=\"단점은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점은?</h4>\n<ol>\n<li>사용할 수 있는 메서드가 한정적이다.</li>\n<li>분산환경에는 부적합하다.</li>\n<li>HTTP 통신 모델에 대해서만 지원한다.</li>\n</ol>\n<h3 id=\"tdd란-무엇이며-어떠한-장점이-있는가\" style=\"position:relative;\"><a href=\"#tdd%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B4%EB%A9%B0-%EC%96%B4%EB%96%A0%ED%95%9C-%EC%9E%A5%EC%A0%90%EC%9D%B4-%EC%9E%88%EB%8A%94%EA%B0%80\" aria-label=\"tdd란 무엇이며 어떠한 장점이 있는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TDD란 무엇이며 어떠한 장점이 있는가?</h3>\n<p>Test-Driven Development(TDD)는 매우 짧은 개발 사이클의 반복에 의존하는 소프트웨어 개발 프로세스이다. 우선 개발자는 요구되는 새로운 기능에 대한 자동화된 테스트케이스를 작성하고 해당 테스트를 통과하는 가장 간단한 코드를 작성한다. 일단 테스트 통과하는 코드를 작성하고 상황에 맞게 리팩토링하는 과정을 거치는 것이다. 말 그대로 테스트가 코드 작성을 주도하는 개발방식이다.</p>\n<h3 id=\"함수형-프로그래밍이란\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\" aria-label=\"함수형 프로그래밍이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 프로그래밍이란?</h3>\n<p>명령형 프로그래밍을 기반으로 개발했던 개발자들은 개발하는 소프트웨어의 크기가 커짐에 따라, 스파게티 코드를 유지보수하는 것이 매우 힘들다는 것을 깨닫게 되었다. 이를 해결하기 위해 함수형 프로그래밍이라는 패러다임이 등장하게 되었는데, 함수형 프로그래밍은 거의 모든 것을 순수 함수로 나누어 문제를 해결하는 기법으로, 작은 문제를 해결하기 위한 함수를 작성하여 가독성을 높이고 유지보수를 용이하게 해준다.</p>\n<blockquote>\n<p><strong>순수 함수</strong> : 부수 효과(Side Effect)들을 제거한 함수들을 순수 함수(Pure Function)이라고 부른다.<br>\n<strong>부수 효과</strong> : 여기서 부수효과(Side Effect)란 다음과 같은 변화 또는 변화가 발생하는 작업을 의미한다.</p>\n<ul>\n<li>변수의 값이 변경됨</li>\n<li>자료 구조를 제자리에서 수정함</li>\n<li>객체의 필드값을 설정함</li>\n<li>예외나 오류가 발생하며 실행이 중단됨</li>\n<li>콘솔 또는 파일 I/O가 발생함</li>\n<li>Memory or I/O의 관점에서 Side Effect가 없는 함수</li>\n<li>함수의 실행이 외부에 영향을 끼치지 않는 함수</li>\n</ul>\n</blockquote>\n<p>함수형 프로그래밍의 가장 큰 특징 2가지는 <code class=\"language-text\">immutable data</code>와 <code class=\"language-text\">first class citizen으로서의 function</code>이다.</p>\n<h4 id=\"immutable-vs-mutable\" style=\"position:relative;\"><a href=\"#immutable-vs-mutable\" aria-label=\"immutable vs mutable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>immutable vs mutable</h4>\n<p><code class=\"language-text\">immutable</code>이란 말 그대로 변경 불가능함을 의미한다. <code class=\"language-text\">immutable</code> 객체는 객체가 가지고 있는 값을 변경할 수 없는 객체를 의미하며 값이 변경될 경우, 새로운 객체를 생성하고 변경된 값을 주입하여 반환해야 한다. 이와는 달리, <code class=\"language-text\">mutable</code>객체는 해당 객체의 값이 변경될 경우 값을 변경한다.</p>\n<h4 id=\"first-class-citizen\" style=\"position:relative;\"><a href=\"#first-class-citizen\" aria-label=\"first class citizen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>first-class citizen</h4>\n<p>함수형 프로그래밍 패러다임을 따르고 있는 언어에서의 함수(function)는 일급 객체(first class citizen)으로 간주된다. 일급 객체라 함은 다음과 같다.</p>\n<ul>\n<li>변수나 데이터 구조 안에 함수를 담을 수 있어서 함수의 파라미터로 전달할 수 있고, 함수의 반환값으로 사용할 수 있다.</li>\n<li>할당에 사용된 이름과 관계없이 고유한 구별이 가능하다.</li>\n<li>함수를 리터럴로 바로 정의할 수 있다.</li>\n</ul>\n<h3 id=\"mvc-패턴이란-무엇인가\" style=\"position:relative;\"><a href=\"#mvc-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"mvc 패턴이란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC 패턴이란 무엇인가?</h3>\n<p>유지보수의 편의성을 위해 개발 초반부터 준수해야할 규칙들을 정하게 되고 계속해서 반복적으로 사용되는 규칙들은 나중에 패턴이 된다. 쉽게 말해 그런 패턴들을 디자인 패턴이라 하며, 이런 패턴들을 잘 따를 수 있도록 짜여진 구조를 아키텍처라고 한다.</p>\n<p><img src=\"https://velog.velcdn.com/images%2Fluna238%2Fpost%2F0b553c84-0fc0-4549-a17c-7c03568f3f65%2Fimage.png\" alt=\"\"></p>\n<p><code class=\"language-text\">MVC</code>도 디자인 패턴을 따르는 아키텍처 중의 하나이다. <code class=\"language-text\">MVC</code>는 원래 웹개발 외에 다른 소프트웨어 설계에도 등장하는 개념인데, 특히 현대에 들어서는 주로 웹개발에 사용되는 개념이다. <code class=\"language-text\">MVC</code> 외에도 MVVM, MVP 등의 다양한 아키텍처 들이 존재하는데, 대부분 <code class=\"language-text\">MVC</code>에서 유래되거나 발전된 형태이다.</p>\n<p>프론트엔드에서의 <code class=\"language-text\">MVC</code>는 백엔드와 다르다. 시간이 흐르면서 백엔드에서 더 이상 html파일을 전부 만들지 않아도, 프론트엔드 쪽에서 ajax라는 기술을 통해서 html의 변경이 가능해졌다. 백엔드 역할의 일부가 프론트엔드 쪽으로 넘어오면서 프론트엔드의 <code class=\"language-text\">MVC</code> 개념이 생기게 된다.</p>\n<p>기존의 데이터베이스를 뜻했던 **M(Model)**은 ajax를 통해 받은 데이터와 그 데이터를 통해 변경될 수 있는 상태를 말하고, **V(View)**는 html, css로 만들어진 말 그대로의 화면을 말하고, **C(Controller)**는 javascript가 View에서 호출되는 이벤트를 통해 서버에 데이터를 전달하고, 다시 전달받은 데이터로 Model을 변경해주는 역할을 한다.</p>\n<p>브라우저에서 이 버튼을 클릭했을 때 일어나는 일을 생각해 보자. 잘 구현된 버튼이라면 하나의 기능을 수행하는 이벤트가 버튼에 바인딩 되어 있을 것이다. 사용자는 브라우저의 화면에 보여지는 html과 css로 이루어진 View의 버튼을 통해 이벤트를 호출할 것이다. View에서 호출된 이벤트로 Controller가 서버에 데이터를 요청하든지 상태를 직접 변경하든지 Model을 변경한다. Model이 변경되면 View에 변경된 Model을 반영해준다. 이 때 Model은 직접 View를 변경할 수 없고, Controller를 통해 변경해야 한다.</p>\n<p>그래서 프론트엔드의 MVC는 <code class=\"language-text\">View -> Controller -> Model -> Controller -> View</code> 형태이다. Model, View, Controller는 각각의 의존관계를 가지고 있기 때문에 코드를 작성할 때, 유지보수가 쉽고 코드의 흐름을 예측할 수 있어서 원하는 부분을 찾기 수월해진다.</p>\n<p>데이터베이스를 다루는 백엔드의 역할을 프론트엔드가 ajax를 통해 관리하면서 기존 MVC의 개념이 변경되었다. 이 때 사람들에게 많이 사용된 기술이 jQuery이다. 지금은 react, vue, angular 등의 등장으로 잘 사용되지 않고 있지만, 몇 년전까지만 해도 모두가 jQuery를 사용했다.</p>\n<p>MVC이후에는 react, vue, angular등을 라이브러리와 프레임워크를 사용하면서 Controller도 직접 조작할 필요없이, 화면에 보여주는 ViewModel만 변경해주면 된다는 개념에서 등장한 MVVM이 나왔다. 이후에 등장하는 MV* 의 아키텍처는 대부분 MVC를 기반으로 나온 것이다. 그러므로 MVC에 대한 개념을 확실히 알고 있으면 대부분의 디자인 패턴에 쉽게 적응할 수 있다.</p>\n<h3 id=\"git과-github에-대해서\" style=\"position:relative;\"><a href=\"#git%EA%B3%BC-github%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C\" aria-label=\"git과 github에 대해서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git과 GitHub에 대해서</h3>\n<p><strong>Git</strong>은 본인의 코드와 수정 내역을 기록하고 관리하도록 돕는 버전 관리 시스템이다. 하지만 로컬 저장소를 사용하기 떄문에 다른 개발자와 실시간으로 작업을 공유할 수 없다.</p>\n<p><strong>Github</strong>은 git 저장소를 관리하는 클라우드 기반 호스팅 서비스이다. 다른 사람과 소스코드 공유가 가능하며, 분산 버전 제어 등이 가능한 원격 저장소이다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-part-1-1-development-common-sense\">💡 Part 1-1 Development common sense</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">좋은 코드란 무엇인가?</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">객체 지향 프로그래밍이란 무엇인가?</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%8A%B9%EC%A7%95\">객체 지향 프로그래밍의 특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#restful-api-%EB%9E%80\">RESTFul API 란?</a></p>\n<ul>\n<li><a href=\"#restful%ED%95%98%EA%B2%8C-api%EB%A5%BC-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%95%9C%EB%8B%A4%EB%8A%94-%EA%B2%83%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%9D%98%EB%AF%B8%ED%95%98%EB%8A%94%EA%B0%80\">RESTful하게 API를 디자인 한다는 것은 무엇을 의미하는가</a></li>\n<li><a href=\"#%EC%96%B4%EB%96%A0%ED%95%9C-%EC%9E%A5%EC%A0%90%EC%9D%B4-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94%EA%B0%80\">어떠한 장점이 존재하는가?</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90%EC%9D%80\">단점은?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tdd%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B4%EB%A9%B0-%EC%96%B4%EB%96%A0%ED%95%9C-%EC%9E%A5%EC%A0%90%EC%9D%B4-%EC%9E%88%EB%8A%94%EA%B0%80\">TDD란 무엇이며 어떠한 장점이 있는가?</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\">함수형 프로그래밍이란?</a></p>\n<ul>\n<li><a href=\"#immutable-vs-mutable\">immutable vs mutable</a></li>\n<li><a href=\"#first-class-citizen\">first-class citizen</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#mvc-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">MVC 패턴이란 무엇인가?</a></p>\n</li>\n<li>\n<p><a href=\"#git%EA%B3%BC-github%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C\">Git과 GitHub에 대해서</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 23, 2023","title":"프론트엔드 면접 대비 Part1. CS","categories":"interview","author":"leedawn","emoji":"🤡"},"fields":{"slug":"/prepare-interview-01/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://leedawnn.github.io","comments":{"utterances":{"repo":"leedawnn/leedawnn.github.io"}}}}},"pageContext":{"slug":"/prepare-interview-02/","nextSlug":"/prepare-interview-01/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}