{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/so-why-is-js-asynchronous/",
    "result": {"data":{"cur":{"id":"8bc95de7-58e8-5d2b-80db-29ff4b916149","html":"<h2 id=\"어그러게요\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EA%B7%B8%EB%9F%AC%EA%B2%8C%EC%9A%94\" aria-label=\"어그러게요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어…그러게요…?</h2>\n<p>동공 지진을 일으킨 면접 질문이다. 언젠가 자바스크립트 공부를 하면서 보았던 질문이었고, 분명 그 글을 자세하게 읽었던 기억은 나는데..\n내 머릿 속에는 아무것도 남아있지 않았다 😇</p>\n<p>싱글 스레드 기반인 자바스크립트가 어떻게 비동기를 구현했을까?</p>\n<h2 id=\"자바스크립트는-싱글-스레드-기반-언어가-맞나요\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%8B%B1%EA%B8%80-%EC%8A%A4%EB%A0%88%EB%93%9C-%EA%B8%B0%EB%B0%98-%EC%96%B8%EC%96%B4%EA%B0%80-%EB%A7%9E%EB%82%98%EC%9A%94\" aria-label=\"자바스크립트는 싱글 스레드 기반 언어가 맞나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트는 싱글 스레드 기반 언어가 맞나요?</h2>\n<p><strong>Yes! 자바스크립트는 싱글 스레드 기반 언어이다.</strong> 코드 실행 중 하나의 코드에서 멈추거나 걸리면 다음으로 진행할 수 없다. 이러한 일이 발생하는 대표적인 예로 alert가 있다. <code class=\"language-text\">alert('Hello Wrold');</code></p>\n<p>alert 창에서 확인을 누르기 전까지는 웹 페이지와 상호 작용을 할 수 없다.</p>\n<h2 id=\"그렇다면-자바스크립트로-어떻게-비동기를-구현할-수-있는-것일까-\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B9%84%EB%8F%99%EA%B8%B0%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EA%B2%83%EC%9D%BC%EA%B9%8C-\" aria-label=\"그렇다면 자바스크립트로 어떻게 비동기를 구현할 수 있는 것일까  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면, 자바스크립트로 어떻게 비동기를 구현할 수 있는 것일까? 🤨</h2>\n<p>프론트엔드 관점에서 자바스크립트 코드는 반드시 브라우저를 통해 실행된다. 이 브라우저에 내장되어 있는 기능인 <strong>이벤트 루프(event loop)</strong> 덕분에 싱글 스레드 언어인 자바스크립트가 우리 눈으로 보기엔 동시성(Concurrency)을 갖는 작업을 해내는 것으로 보이게 된다.</p>\n<p>브라우저의 환경을 그림으로 표현하면 아래와 같다.</p>\n<p><img src=\"https://poiemaweb.com/img/event-loop.png\" alt=\"\"></p>\n<p>이처럼 콜 스택과 힙으로 구성되어 있는 자바스크립트 엔진은 단순히 task가 요청되면 콜 스택을 통해 요청된 작업을 순차적으로 실행할 뿐이다.</p>\n<blockquote>\n<p><strong>Call Stack(호출 스택)</strong><br>\n작업이 요청되면(함수가 호출되면) 요청된 작업은 순차적으로 Call Stack에 쌓이게 되고 순차적으로 실행된다. 자바스크립트는 단 하나의 Call Stack을 사용하기 때문에 해당 task가 종료되기 전까지는 다른 어떤 task도 수행될 수 없다.</p>\n</blockquote>\n<blockquote>\n<p><strong>Heap</strong><br>\n동적으로 생성된 객체 인스턴스가 할당되는 영역이다.</p>\n</blockquote>\n<p><strong>비동기 처리에서 소스코드의 평가와 실행을 제외한 모든 처리는 자바스크립트 엔진을 구동하는 환경인 브라우저 또는 Node.js가 담당한다.</strong></p>\n<p>이를 위해 브라우저 환경은 <strong>태스크 큐</strong>와 <strong>이벤트 루프</strong>를 제공한다.</p>\n<blockquote>\n<p><strong>태스크 큐(task queue)</strong><br>\nsetTimeout 이나 setinterval과 같은 비동기 함수의 콜백 함수 또는 이벤트 핸들러가 일시적으로 보관되는 영역이다.</p>\n</blockquote>\n<blockquote>\n<p><strong>이벤트 루프(event loop)</strong><br>\n이벤트 루프는 콜 스택에 현재 실행 중인 실행 컨텍스트가 있는지, 그리고 태스크 큐에 대기 중인 함수(콜백 함수, 이벤트 핸들러 등)가 있는지 반복해서 확인한다. 만약 콜 스택이 비어있고 태스크 큐에 대기 중인 함수가 있다면 이벤트 루프는 순차적(FIFO)으로 태스크 큐에 대기 중인 함수를 콜 스택으로 이동시킨다. 즉, 태스크 큐에 일시 보관된 함수들은 비동기 처리 방식으로 동작한다.</p>\n</blockquote>\n<p>브라우저 환경에서 아래의 코드가 어떻게 동작할지 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0초(실제는 4ms) 후에 호출됨</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>콜 스택에 setTimeout 함수가 콜 스택에 담긴다.</li>\n<li>setTimeout 함수가 실행되면 콜 스택에서 pop된다. 이때 타이머가 만료되면 콜백 함수를 태스크 큐에 푸시하는 것은 브라우저의 역할이다.</li>\n<li>브라우저가 수행하는 4번과 자바스크립트 엔진이 수행하는 5번은 병행 처리된다.</li>\n<li>브라우저는 타이머가 만료되면 콜백 함수 foo가 태스크 큐에 푸시된다. 4ms 후에 콜백 함수 foo가 태스크 큐에 푸시되어 대기하게 된다.</li>\n<li>bar 함수가 콜 스택에 담긴다. 이후 bar 함수가 종료되어 콜 스택에서 pop된다. 이때 브라우저가 타이머를 설정한 후 4ms가 경과했다면 foo 함수는 아직 태스크 큐에서 대기 중이다.</li>\n<li>이후 foo 함수가 종료되어 콜 스택에서 pop된다.</li>\n</ol>\n<p>이처럼 비동기 함수인 setTimeout의 콜백 함수는 태스크 큐에 푸시되어 대기하다가 콜 스택이 비게 되면, 다시 말해 전역 코드 및 명시적으로 호출된 함수가 모두 종료하면 비로소 콜 스택에 푸시되어 실행된다.</p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>자바스크립트는 싱글 스레드 방식으로 동작한다. 이때 싱글 스레드 방식으로 동작하는 것은 브라우저가 아니라, 브라우저에 내장된 자바스크립트 엔진이라는 것에 주의해야한다. 만약 모든 자바스크립트 코드가 자바스크립트 엔진에서 싱글 스레드 방식으로 동작한다면 자바스크립트는 비동기로 동작할 수 없다. <strong>즉, 자바스크립트 엔진은 싱글 스레드로 동작하지만 브라우저(또는 Node.js와 같은 런타임 환경)는 멀티 스레드로 동작한다.</strong></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%96%B4%EA%B7%B8%EB%9F%AC%EA%B2%8C%EC%9A%94\">어…그러게요…?</a></li>\n<li><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%8B%B1%EA%B8%80-%EC%8A%A4%EB%A0%88%EB%93%9C-%EA%B8%B0%EB%B0%98-%EC%96%B8%EC%96%B4%EA%B0%80-%EB%A7%9E%EB%82%98%EC%9A%94\">자바스크립트는 싱글 스레드 기반 언어가 맞나요?</a></li>\n<li><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B9%84%EB%8F%99%EA%B8%B0%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EA%B2%83%EC%9D%BC%EA%B9%8C-\">그렇다면, 자바스크립트로 어떻게 비동기를 구현할 수 있는 것일까? 🤨</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</div>","excerpt":"어…그러게요…? 동공 지진을 일으킨 면접 질문이다. 언젠가 자바스크립트 공부를 하면서 보았던 질문이었고, 분명 그 글을 자세하게 읽었던 기억은 나는데..\n내 머릿 속에는 아무것도 남아있지 않았다 😇 싱글 스레드 기반인 자바스크립트가 어떻게 비동기를 구현했을까? 자바스크립트는 싱글 스레드 기반 언어가 맞나요? Yes! 자바스크립트는 싱글 스레드 기반 언어이다. 코드 실행 중 하나의 코드에서 멈추거나 걸리면 다음으로 진행할 수 없다. 이러한 일이 발생하는 대표적인 예로 alert가 있다.  alert 창에서 확인을 누르기 전까지는 웹 페이지와 상호 작용을 할 수 없다. 그렇다면, 자바스크립트로 어떻게 비동기를 구현할 수 있는 것일까? 🤨 프론트엔드 관점에서 자바스크립트 코드는 반드시 브라우저를 통해 실행된다. 이 브라우저에 내장되어 있는 기능인 이벤트 루프(event loop) 덕분에 싱글 스레드 언어인 자바스크립트가 우리 눈으로 보기엔 동시성(Concurrency)을 갖는 작업을 해…","frontmatter":{"date":"March 09, 2023","title":"자바스크립트는 싱글 스레드인데 어떻게 비동기가 가능할까요?","categories":"javascript","author":"leedawn","emoji":"🦊"},"fields":{"slug":"/so-why-is-js-asynchronous/"}},"next":{"id":"429bf1c8-7e67-52fb-9f32-90949608fac3","html":"<h1 id=\"데이터-속성이란\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%8D%EC%84%B1%EC%9D%B4%EB%9E%80\" aria-label=\"데이터 속성이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 속성이란?</h1>\n<p><code class=\"language-text\">data-*</code>속성은 특정한 데이터를 DOM 요소에 저장해두기 위한 목적으로 쓰인다. 브라우저는 이러한 데이터 속성에는 어떠한 행동도 관여하지 않기 때문에 개발자는 요소에 특정한 데이터를 저장하고 싶은 경우 자유롭게 사용할 수 있다.</p>\n<h2 id=\"html-문법\" style=\"position:relative;\"><a href=\"#html-%EB%AC%B8%EB%B2%95\" aria-label=\"html 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML 문법</h2>\n<p>어느 element에서나 <code class=\"language-text\">data-</code>로 시작하는 속성은 무엇이든 사용할 수 있다. 화면에 보이지 않게 글이나 추가 정보를 element에 담아 놓을 수 있다. 아래와 같이 사용하면 된다!</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>article</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>electriccars<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-columns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-index-number</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>12314<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-parent</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cars<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>article</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"javascript에서-접근하기\" style=\"position:relative;\"><a href=\"#javascript%EC%97%90%EC%84%9C-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\" aria-label=\"javascript에서 접근하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript에서 접근하기</h2>\n<p>이 속성 값들을 읽기 위해 <code class=\"language-text\">getAttribute()</code>를 사용하면 된다. 더 쉬운 방법으로 <code class=\"language-text\">dataset</code> 객체를 통해 읽어낼 수도 있다. (단, <code class=\"language-text\">data-</code> 뒷 부분을 CamelCase로 변환하여 사용하자)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> article <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'electriccars'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\narticle<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"3\"</span>\narticle<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>indexNumber<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"12314\"</span>\narticle<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"cars\"</span></code></pre></div>\n<p>각 속성은 문자열이며 읽거나 쓸 수 있다. 위의 경우에서 <code class=\"language-text\">article.dataset.columns = 5</code>와 같이 설정하면 해당 속성은 <code class=\"language-text\">\"5\"</code>로 변경된다.</p>\n<h2 id=\"css에서-접근하기\" style=\"position:relative;\"><a href=\"#css%EC%97%90%EC%84%9C-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\" aria-label=\"css에서 접근하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS에서 접근하기</h2>\n<p>데이터 속성은 HTML 속성이기 때문에 CSS에서도 접근할 수 있다. 예를 들어, 부모 데이터를 article에서 보여주려면 <code class=\"language-text\">attr</code> 함수를 사용하여 데이터 속성값을 넣고, <code class=\"language-text\">content</code> 속성과 함께 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">article::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span>data-parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">attr()</code> CSS 함수는 선택한 요소의 속성 값을 검색하여 스타일시트에 사용합니다. 또한 유사 요소에서 사용할 수 있으며, 이 경우 유사 요소의 원래 요소에 대한 속성 값이 반환됩니다.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/attr\">https://developer.mozilla.org/en-US/docs/Web/CSS/attr</a></p>\n</blockquote>\n<blockquote>\n</blockquote>\n<p>CSS의 속성 선택자도 데이터에 따라 스타일을 바꾸는데 사용할 수 있다. 데이터 값은 문자열이기 때문에, 스타일을 적용하려면 숫자 값은 선택자에 따옴표 안에 써주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">article[data-columns='3']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">article[data-columns='4']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"문제점\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제점</h2>\n<p><strong>눈에 보여야만 하고, 접근할 수 있어야하는 내용은 데이터 속성에 저장하지 않아야한다.</strong> 스크린 리더와 같은 보조 기술이 접근할 수 없기 때문이다. 또한 검색 크롤러가 데이터 속성의 값을 찾지 못할 수도 있다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes\">Using data attributes - Learn web development | MDN</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#html-%EB%AC%B8%EB%B2%95\">HTML 문법</a></li>\n<li><a href=\"#javascript%EC%97%90%EC%84%9C-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\">Javascript에서 접근하기</a></li>\n<li><a href=\"#css%EC%97%90%EC%84%9C-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\">CSS에서 접근하기</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\">문제점</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 02, 2023","title":"data 속성이란 무엇일까?","categories":"frontend","author":"leedawn","emoji":"💽"},"fields":{"slug":"/what-about-data-/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://leedawnn.github.io","comments":{"utterances":{"repo":"leedawnn/leedawnn.github.io"}}}}},"pageContext":{"slug":"/so-why-is-js-asynchronous/","nextSlug":"/what-about-data-/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}